import json
import os

from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import (
    QGridLayout,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QListWidget,
    QListWidgetItem,
    QMessageBox,
    QPushButton,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

from src.config.config import settings
from src.desktop_client.image_config_editor_dialog import ConfigEditorDialog
from src.storage.config_storage import config_manager
from src.storage.model import DockerImage

docker_image_icon_path = os.path.join(settings.ICONS_PATH, "docker_icon.svg")


class DockerImagesPage(QWidget):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö Docker-–æ–±—Ä–∞–∑–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
    """

    def __init__(self, parent=None) -> None:
        super().__init__(parent)
        self.docker_list: QListWidget = QListWidget()
        self.container_info = QTextEdit()
        self.custom_image_edit = QLineEdit()

        self.add_image_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        self.delete_image_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.edit_config_button = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")

        self.initUI()

    def initUI(self) -> None:
        main_layout = QHBoxLayout(self)  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        # üîπ –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äì —Å–ø–∏—Å–æ–∫ Docker-–æ–±—Ä–∞–∑–æ–≤
        self.docker_list.itemClicked.connect(
            self.display_container_info,
        )  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        self.load_docker_images()  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–∞–º–∏
        main_layout.addWidget(self.docker_list, 2)  # –ó–∞–Ω–∏–º–∞–µ—Ç 2 —á–∞—Å—Ç–∏ –æ—Ç 3

        # üîπ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        right_panel = QVBoxLayout()

        # –ì—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        details_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        details_layout = QVBoxLayout()

        self.container_info.setReadOnly(True)
        details_layout.addWidget(self.container_info)

        details_group.setLayout(details_layout)
        right_panel.addWidget(details_group)

        # üîπ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞–º–∏ (–∫–Ω–æ–ø–∫–∏)
        manage_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞–º–∏")
        manage_layout = QGridLayout()

        self.custom_image_edit.setPlaceholderText("custom/image:tag")

        manage_layout.addWidget(QLabel("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑:"), 0, 0)
        manage_layout.addWidget(self.custom_image_edit, 0, 1)
        manage_layout.addWidget(self.add_image_button, 1, 0)
        manage_layout.addWidget(self.delete_image_button, 1, 1)
        manage_layout.addWidget(self.edit_config_button, 2, 0, 1, 2)

        manage_group.setLayout(manage_layout)
        right_panel.addWidget(manage_group)

        main_layout.addLayout(right_panel, 3)  # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç 3 —á–∞—Å—Ç–∏ –æ—Ç 5

        self.setLayout(main_layout)

        self.add_image_button.clicked.connect(self.add_docker_image)
        self.delete_image_button.clicked.connect(self.delete_docker_image)
        self.edit_config_button.clicked.connect(self.edit_docker_config)

    def load_docker_images(self) -> None:
        docker_images = config_manager.get_all_docker_images()
        self.docker_list.clear()
        for image in docker_images:
            self._add_image_to_list(image)

    def _add_image_to_list(self, image: DockerImage) -> None:
        item = QListWidgetItem(image.name)
        item.setData(Qt.ItemDataRole.UserRole, image.id)
        self.docker_list.addItem(item)

    def display_container_info(self, item) -> None:
        container_name = item.text()
        image_config = config_manager.get_db_config(container_name)
        info_text = json.dumps(
            image_config,
            indent=4,
            ensure_ascii=False,
            sort_keys=True,
        )

        self.container_info.setText(info_text)

    def add_docker_image(self) -> None:
        new_image = self.custom_image_edit.text().strip()
        if not new_image:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±—Ä–∞–∑–∞.")
            return
        image = config_manager.add_docker_image(DockerImage(name=new_image))
        self._add_image_to_list(image)
        QMessageBox.information(
            self,
            "–î–æ–±–∞–≤–ª–µ–Ω–æ",
            f"–û–±—Ä–∞–∑ {new_image} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
        )

    def delete_docker_image(self) -> None:
        selected_item = self.docker_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        config_manager.delete_docker_image(
            image_id=selected_item.data(Qt.ItemDataRole.UserRole),
        )
        self.docker_list.takeItem(self.docker_list.row(selected_item))
        QMessageBox.information(
            self,
            "–£–¥–∞–ª–µ–Ω–æ",
            f"–û–±—Ä–∞–∑ {selected_item.text()} —É–¥–∞–ª–µ–Ω.",
        )

    def edit_docker_config(self) -> None:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ Docker-–æ–±—Ä–∞–∑–∞.
        """
        selected_image_name = self.docker_list.currentItem().text()
        if not selected_image_name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –æ–±—Ä–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        config_dict = config_manager.get_db_config(selected_image_name)

        # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialog = ConfigEditorDialog(
            self,
            image_name=selected_image_name,
            config_dict=config_dict,
        )
        if dialog.exec():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            new_config = dialog.get_config_dict()
            config_manager.add_or_update_db_config(selected_image_name, new_config)
            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {selected_image_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
            )
